[
  {
    "id": "weather",
    "user_id": "8d2acda6-7eb0-48ce-90fa-db5c82910c57",
    "name": "Weather",
    "content": "\"\"\"\ntitle: Keyless Weather\nauthor: spyci\nauthor_url: https://github.com/open-webui\nfunding_url: https://github.com/open-webui\nversion: 0.1.1\n\"\"\"\n\nimport os\nimport requests\nimport urllib.parse\nimport datetime\n\n\ndef get_city_info(city: str):\n    url = f\"https://geocoding-api.open-meteo.com/v1/search?name={urllib.parse.quote(city)}&count=1&language=en&format=json\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        try:\n            data = response.json()[\"results\"][0]\n            return data[\"latitude\"], data[\"longitude\"], data[\"timezone\"]\n        except (KeyError, IndexError):\n            print(f\"City '{city}' not found\")\n            return None\n    else:\n        print(f\"Failed to retrieve data for city '{city}': {response.status_code}\")\n        return None\n\n\nwmo_weather_codes = {\n    \"0\": \"Clear sky\",\n    \"1\": \"Mainly clear, partly cloudy, and overcast\",\n    \"2\": \"Mainly clear, partly cloudy, and overcast\",\n    \"3\": \"Mainly clear, partly cloudy, and overcast\",\n    \"45\": \"Fog and depositing rime fog\",\n    \"48\": \"Fog and depositing rime fog\",\n    \"51\": \"Drizzle: Light, moderate, and dense intensity\",\n    \"53\": \"Drizzle: Light, moderate, and dense intensity\",\n    \"55\": \"Drizzle: Light, moderate, and dense intensity\",\n    \"56\": \"Freezing Drizzle: Light and dense intensity\",\n    \"57\": \"Freezing Drizzle: Light and dense intensity\",\n    \"61\": \"Rain: Slight, moderate and heavy intensity\",\n    \"63\": \"Rain: Slight, moderate and heavy intensity\",\n    \"65\": \"Rain: Slight, moderate and heavy intensity\",\n    \"66\": \"Freezing Rain: Light and heavy intensity\",\n    \"67\": \"Freezing Rain: Light and heavy intensity\",\n    \"71\": \"Snow fall: Slight, moderate, and heavy intensity\",\n    \"73\": \"Snow fall: Slight, moderate, and heavy intensity\",\n    \"75\": \"Snow fall: Slight, moderate, and heavy intensity\",\n    \"77\": \"Snow grains\",\n    \"80\": \"Rain showers: Slight, moderate, and violent\",\n    \"81\": \"Rain showers: Slight, moderate, and violent\",\n    \"82\": \"Rain showers: Slight, moderate, and violent\",\n    \"85\": \"Snow showers slight and heavy\",\n    \"86\": \"Snow showers slight and heavy\",\n    \"95\": \"Thunderstorm: Slight or moderate\",\n    \"96\": \"Thunderstorm with slight and heavy hail\",\n    \"99\": \"Thunderstorm with slight and heavy hail\",\n}\n\n\ndef fetch_weather_data(base_url, params):\n    try:\n        response = requests.get(base_url, params=params)\n        response.raise_for_status()\n        data = response.json()\n        if \"error\" in data:\n            return f\"Error fetching weather data: {data['message']}\"\n        return data\n    except requests.RequestException as e:\n        return f\"Error fetching weather data: {str(e)}\"\n\n\ndef format_date(date_str, date_format=\"%Y-%m-%dT%H:%M\", output_format=\"%I:%M %p\"):\n    dt = datetime.datetime.strptime(date_str, date_format)\n    return dt.strftime(output_format)\n\n\nclass Tools:\n    def __init__(self):\n        self.citation = True\n        pass\n\n    def get_future_weather_week(self, city: str) -> str:\n        \"\"\"\n        Get the weather for the next week for a given city.\n        :param city: The name of the city to get the weather for.\n        :return: The current weather information or an error message.\n        \"\"\"\n        if not city:\n            return \"\"\"The location has not been defined by the user, so weather cannot be determined.\"\"\"\n\n        city_info = get_city_info(city)\n        if not city_info:\n            return \"\"\"Error fetching weather data\"\"\"\n\n        lat, lng, tmzone = city_info\n        print(f\"Latitude: {lat}, Longitude: {lng}, Timezone: {tmzone}\")\n\n        base_url = \"https://api.open-meteo.com/v1/forecast\"\n        params = {\n            \"latitude\": lat,\n            \"longitude\": lng,\n            \"daily\": [\n                \"weather_code\",\n                \"temperature_2m_max\",\n                \"temperature_2m_min\",\n                \"uv_index_max\",\n                \"precipitation_probability_max\",\n                \"wind_speed_10m_max\",\n            ],\n            \"current\": \"temperature_2m\",\n            \"timezone\": tmzone,\n            \"temperature_unit\": \"fahrenheit\",\n            \"wind_speed_unit\": \"mph\",\n            \"precipitation_unit\": \"inch\",\n            \"forecast_days\": 7,\n        }\n\n        data = fetch_weather_data(base_url, params)\n        if isinstance(data, str):\n            return data\n\n        formatted_timestamp = format_date(data[\"current\"][\"time\"])\n        data[\"daily\"][\"time\"][0] += \" (Today)\"\n\n        mapped_data = {\n            date: {\n                \"weather_description\": wmo_weather_codes[\n                    str(data[\"daily\"][\"weather_code\"][i])\n                ],\n                \"temperature_max_min\": f'{data[\"daily\"][\"temperature_2m_max\"][i]} {data[\"daily_units\"][\"temperature_2m_max\"]} / {data[\"daily\"][\"temperature_2m_min\"][i]} {data[\"daily_units\"][\"temperature_2m_min\"]}',\n                \"uv_index_max\": f'{data[\"daily\"][\"uv_index_max\"][i]} {data[\"daily_units\"][\"uv_index_max\"]}',\n                \"precipitation_probability_max\": f'{data[\"daily\"][\"precipitation_probability_max\"][i]} {data[\"daily_units\"][\"precipitation_probability_max\"]}',\n                \"max_wind_speed\": f'{data[\"daily\"][\"wind_speed_10m_max\"][i]} {data[\"daily_units\"][\"wind_speed_10m_max\"]}',\n            }\n            for i, date in enumerate(data[\"daily\"][\"time\"])\n        }\n\n        return f\"\"\"\nGive a weather description for the next week, include the time of the data ({formatted_timestamp} {data['timezone_abbreviation']} in {city}):\nShow a standard table layout of each of these days: {mapped_data}\nInclude a one sentence summary of the week at the end.\"\"\"\n\n    def get_current_weather(self, city: str) -> str:\n        \"\"\"\n        Get the current weather for a given city.\n        :param city: The name of the city to get the weather for.\n        :return: The current weather information or an error message.\n        \"\"\"\n        if not city:\n            return \"\"\"The location has not been defined by the user, so weather cannot be determined.\"\"\"\n\n        city_info = get_city_info(city)\n        if not city_info:\n            return \"\"\"Error fetching weather data\"\"\"\n\n        lat, lng, tmzone = city_info\n        print(f\"Latitude: {lat}, Longitude: {lng}, Timezone: {tmzone}\")\n\n        base_url = \"https://api.open-meteo.com/v1/forecast\"\n        params = {\n            \"latitude\": lat,\n            \"longitude\": lng,\n            \"current\": [\n                \"temperature_2m\",\n                \"relative_humidity_2m\",\n                \"apparent_temperature\",\n                \"wind_speed_10m\",\n                \"weather_code\",\n            ],\n            \"timezone\": tmzone,\n            \"temperature_unit\": \"celsius\",\n            \"wind_speed_unit\": \"kmh\",\n            \"precipitation_unit\": \"mm\",\n            \"forecast_days\": 1,\n        }\n\n        data = fetch_weather_data(base_url, params)\n        if isinstance(data, str):\n            return data\n\n        formatted_timestamp = format_date(data[\"current\"][\"time\"])\n        data[\"current\"][\"weather_code\"] = wmo_weather_codes[\n            str(data[\"current\"][\"weather_code\"])\n        ]\n        formatted_data = \", \".join(\n            [\n                f\"{x} ({data['current_units'][x]}) = '{data['current'][x]}'\"\n                for x in data[\"current\"].keys()\n            ]\n        ).replace(\"weather_code\", \"weather_description\")\n\n        return f\"\"\"\nGive a weather description, include the time of the data ({formatted_timestamp} {data['timezone_abbreviation']} in {city}):\nInclude this data: [{formatted_data}]\nEnsure you mention the real temperature and the \"feels like\"(apparent_temperature) temperature. Convert all numbers to integers.\nKeep response as brief as possible.\"\"\"\n",
    "specs": [
      {
        "name": "get_current_weather",
        "description": "Get the current weather for a given city.",
        "parameters": {
          "properties": {
            "city": {
              "description": "The name of the city to get the weather for.",
              "type": "string"
            }
          },
          "required": [
            "city"
          ],
          "type": "object"
        }
      },
      {
        "name": "get_future_weather_week",
        "description": "Get the weather for the next week for a given city.",
        "parameters": {
          "properties": {
            "city": {
              "description": "The name of the city to get the weather for.",
              "type": "string"
            }
          },
          "required": [
            "city"
          ],
          "type": "object"
        }
      }
    ],
    "meta": {
      "description": "Get the weather for a specific city. Does not require an API key.",
      "manifest": {
        "title": "Keyless Weather",
        "author": "spyci",
        "author_url": "https://github.com/open-webui",
        "funding_url": "https://github.com/open-webui",
        "version": "0.1.1"
      }
    },
    "access_control": null,
    "updated_at": 1742911779,
    "created_at": 1742911295
  }
]
